// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 RAM8s, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
      DMux8Way(in=load, sel[0..2]=address[0..2], a=RegiA, b=RegiB, c=RegiC, d=RegiD, e=RegiE, f=RegiF, g=RegiG, h=RegiH);

      RAM8(in=in, load=RegiA, address=address[3..5], out=outA);
      RAM8(in=in, load=RegiB, address=address[3..5], out=outB);
      RAM8(in=in, load=RegiC, address=address[3..5], out=outC);
      RAM8(in=in, load=RegiD, address=address[3..5], out=outD);
      RAM8(in=in, load=RegiE, address=address[3..5], out=outE);
      RAM8(in=in, load=RegiF, address=address[3..5], out=outF);
      RAM8(in=in, load=RegiG, address=address[3..5], out=outG);
      RAM8(in=in, load=RegiH, address=address[3..5], out=outH);

      Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, sel[0..2]=address[0..2], out=out);
}
